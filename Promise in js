///// The Promise object represents the completion (or failure) of an asynchronous operation and its resulting value.
// show the completion/failure of an async operation.
///// promise object has three states.
// 1 - pending - when a promise start it is on pending state.
// 2 - Fulfilled - when the promise successfully complete then it ends in a fulfilled state.
// 3 - Rejected - if any type of error occurs in promise operation then it ends in rejected state.

///// process to create promise -> to create promise object we use Promise() constructor. promise takes a function as an argument.And that function also takes two argument {function resolve(),function reject()}. resolve exicute when promise successfull and reject exicute when promise got some error.

///// When we handle more than one asynchronous task then we have to use promise chaining.In {{promise chaining}} we have then(),catch(),finally().
/// 1 - finally() -> it runs when the promise is either resolved successfully or rejected.
/// 2 - then() -> it runs when the promise is resolved successfully.
/// 3 - catch() -> it runs when the promise is rejected.

////////////////////// example 

const someThings = ["rice","salt","tomato","onion"];

const firedRice = new Promise((resolve,reject)=>{
    if(someThings.includes("rice") && someThings.includes("tomato")){
        resolve("ok done")
    }else{
        reject("not done")
    }
})

firedRice.then((first)=>{
    console.log(first)
}).catch((error)=>{
    console.log(error)
}).finally(()=>{
    console.log("process is done")
})

////////////// Promise.all() study

// promise.all() is a static method takes an iterable of promises as input and returns a single promise.
// if you don't know about iterables,we already studied about it.
// simple syntax -> new Promise.all([promise1,promise2,promise3])

const p1 = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log('The first promise has resolved');
        resolve(10);
    }, 1 * 1000);

});
const p2 = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log('The second promise has rejected');
        resolve(20);
    }, 2 * 1000);
});
const p3 = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log('The third promise has resolved');
        resolve(30);
    }, 3 * 1000);
});

// it return all revolve values in a single array

Promise.all([p1, p2, p3])
    .then(console.log) // The first promise has resolved,The second promise has rejected,The third promise has resolved, [ 10, 20, 30 ]
    .catch(console.log);
    
////// Note -> if 3 out of 1 promise is reject then promise.all() method reject all promise just because one promise is rejected.

const p4 = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log('The first promise has resolved');
        resolve(10);
    }, 1 * 1000);

});
const p5 = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log('The second promise has rejected');
        reject('Failed');
    }, 2 * 1000);
});
const p6 = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log('The third promise has resolved');
        resolve(30);
    }, 3 * 1000);
});


Promise.all([p4, p5, p6])
    .then(console.log) // it print only console.log() statement not the values of all promise why, because 3 out of 1 promise is rejected.
    .catch(console.log);
    
    
    
